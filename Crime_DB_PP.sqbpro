<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/piotr/Documents/RSM/Data Management &amp; Ethics/Integrated Assignment/Results/Crime_DB_PP.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser query" current="2"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="150"/><column_width id="3" width="3688"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainCRIMES"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="CRIMES" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="62"/><column index="2" value="129"/><column index="3" value="61"/><column index="4" value="92"/><column index="5" value="144"/><column index="6" value="181"/><column index="7" value="61"/><column index="8" value="61"/><column index="9" value="61"/><column index="10" value="58"/><column index="11" value="67"/><column index="12" value="72"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Crime" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="5" mode="0"/></sort><column_widths><column index="1" value="96"/><column index="2" value="174"/><column index="3" value="268"/><column index="4" value="136"/><column index="5" value="334"/><column index="6" value="108"/><column index="7" value="90"/><column index="8" value="205"/><column index="9" value="437"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Location_view" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="135"/><column index="2" value="60"/><column index="3" value="125"/><column index="4" value="63"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Neighbourhood" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="2" mode="1"/></sort><column_widths><column index="1" value="61"/><column index="2" value="156"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Type_of_Crime" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="61"/><column index="2" value="447"/><column index="3" value="401"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="1. Create Type_of_Crime">-- 1.Create table Type_of_Crime

--CREATE TABLE Type_of_Crime (iucr TEXT PRIMARY KEY NOT NULL UNIQUE, primarytype TEXT NOT NULL, description TEXT NOT NULL);
</sql><sql name="2. Create Neighbourhood">-- 2.Create table Neighbourhood

--CREATE TABLE Neighbourhood (beat TEXT PRIMARY KEY NOT NULL UNIQUE, district TEXT NOT NULL);

</sql><sql name="3. Create Crime">-- 3.Create table Crime

-- CREATE TABLE Crime
-- (CrimeID INTEGER PRIMARY KEY NOT NULL UNIQUE,
-- crime_date TEXT NOT NULL,
-- iucr TEXT NOT NULL,
-- locationdescription TEXT,
-- arrest TEXT NOT NULL,
-- beat TEXT NOT NULL,
-- FOREIGN KEY (iucr) REFERENCES  Type_of_Crime (iucr),
-- FOREIGN KEY (beat) REFERENCES Neighbourhood (beat));

</sql><sql name="4. Populate tables">-- 4. Load Data and populate the tables
-- First the two tables without the foreign keys

--INSERT INTO Type_of_Crime (iucr, primarytype, description) SELECT DISTINCT iucr, primarytype, description FROM CRIMES;
-- 
--INSERT INTO Neighbourhood (beat, district) SELECT DISTINCT beat, district FROM CRIMES;

-- Then the table Crime with the foreign keys
-- 
-- INSERT INTO Crime(CrimeID, crime_date, iucr, locationdescription, arrest, beat)
-- SELECT CrimeID, crime_date, iucr, locationdescription, arrest, beat FROM CRIMES;

</sql><sql name="5. View">------5. A View with the window fuction for recognizing in which locationtypes (locationdescription) the crimes happen most often in a given hour interval. View is used in tab 10.
-- CREATE VIEW Location_view AS
-- SELECT * FROM 
-- (SELECT locationdescription, hour, Crimes_commited, RANK () OVER(PARTITION BY Hour ORDER BY Crimes_commited DESC) AS Ranking FROM 
-- (SELECT locationdescription,strftime('%H', crime_date) as hour, COUNT(CrimeID) AS Crimes_commited FROM Crime
-- GROUP BY locationdescription, strftime('%H', crime_date))) AS tempor WHERE
-- tempor.Ranking == 1;

</sql><sql name="6. Index">---6. Create index to make querying Top 10 crimes (used for answering question 1) more efficient. Proof that it has been used is at the bottom of the tab 8.
-- CREATE INDEX  
-- &quot;idx_Top_10_Crimes&quot; 
-- ON &quot;Type_of_Crime&quot; (&quot;primarytype&quot;) 
-- WHERE primarytype IN ( 'THEFT',
-- 'BATTERY',
-- 'CRIMINAL DAMAGE',
-- 'ASSAULT',
-- 'DECEPTIVE PRACTICE',
-- 'OTHER OFFENSE',
-- 'NARCOTICS',
-- 'MOTOR VEHICLE THEFT',
-- 'BURGLARY',
-- 'ROBBERY'
-- )
-- ;</sql><sql name="7. Trigger">----7.Create trigger that prevents from updating values of CrimeID, which is unique for each record and is the Primary Key of the Crime table.
-- CREATE TRIGGER Insert_CrimeID
-- BEFORE UPDATE OF CrimeID ON Crime
-- FOR EACH ROW
-- BEGIN
-- SELECT RAISE(ABORT, 'CrimeID is unique and cannot be updated');
-- END;


-- To check if it works, the following code can be executed:
-- 
-- UPDATE Crime
-- SET CrimeID = 0000
-- WHERE CrimeID = 100000;
-- 
-- Execution finished with errors.
-- Result: CrimeID is unique and cannot be updated
-- At line 9:
-- UPDATE Crime
-- SET CrimeID = 0000
-- WHERE CrimeID = 100000;</sql><sql name="8. Queries for question 1">-- 8. Queries for Q1. How did the number of crimes by type (TOP 10) changed over the time (2017 - 2021, by month)?


-- Year to year change in total number of crimes commited
Select strftime ('%Y', crime_date) as year, COUNT(CrimeID) as Crimes_commited, 
ROUND((Count(CrimeID)* 100 / (Select Count(*) From Crime)),2) as &quot;% of total Crime_commited&quot;,
ROUND((Count(CrimeID) - LAG(Count(CrimeID), 2) OVER (ORDER BY CrimeID)) * 100.0 / Count(CrimeID), 2) AS &quot;% change&quot;
From Crime
Group By year;


-- Changes in total number of crimes commited throught the year (by month)
Select strftime ('%m', crime_date) as month, COUNT(CrimeID) as Crimes_commited, 
ROUND((Count(CrimeID)* 100 / (Select Count(*) From Crime)),2) as &quot;% of total Crime_commited&quot;,
ROUND((Count(CrimeID) - LAG(Count(CrimeID), 2) OVER (ORDER BY CrimeID)) * 100.0 / Count(CrimeID), 2) AS &quot;% change&quot;
From Crime
Group By month;


--TOP 10 CRIMES by primarytype
SELECT DISTINCT T.primarytype, COUNT(C.CrimeID) as Crimes_commited FROM Type_of_Crime T 
JOIN Crime C
ON T.iucr = C.iucr
GROUP BY T.primarytype
ORDER BY count(C.CrimeID) DESC
LIMIT 10;

--TOP 10 CRIMES by iucr (primarytype and description presented for information purposes)
SELECT DISTINCT T.iucr, T.primarytype, T.description, COUNT(C.CrimeID) as Crimes_commited FROM Type_of_Crime T 
JOIN Crime C
ON T.iucr = C.iucr
GROUP BY T.iucr
ORDER BY count(C.CrimeID) DESC
LIMIT 10;

--Invastigate how the number of TOP 10 Crimes (grouped by primarytype) changed by year using created index for the 10 most common crimes

SELECT DISTINCT T.primarytype, COUNT(C.CrimeID) as Crimes_commited, strftime ('%Y', crime_date) as year FROM Type_of_Crime T 
JOIN Crime C
ON T.iucr = C.iucr
WHERE &quot;primarytype&quot; IN ('THEFT', 'BATTERY', 'CRIMINAL DAMAGE', 'ASSAULT', 'DECEPTIVE PRACTICE', 'OTHER OFFENSE', 'NARCOTICS', 'MOTOR VEHICLE THEFT', 'BURGLARY', 'ROBBERY')
GROUP BY strftime ('%Y', crime_date), primarytype
ORDER BY strftime ('%Y', crime_date) ASC;

---Let's check if the created index has been used
-- 
--  EXPLAIN QUERY PLAN SELECT DISTINCT T.primarytype, T.description, T.iucr, COUNT(C.CrimeID) as Crimes_commited, strftime ('%Y', crime_date) as year FROM Type_of_Crime T 
-- JOIN Crime C
-- ON T.iucr = C.iucr
-- WHERE &quot;primarytype&quot; IN ('THEFT', 'BATTERY', 'CRIMINAL DAMAGE', 'ASSAULT', 'DECEPTIVE PRACTICE', 'OTHER OFFENSE', 'NARCOTICS', 'MOTOR VEHICLE THEFT', 'BURGLARY', 'ROBBERY')
-- GROUP BY strftime ('%Y', crime_date), primarytype
-- ORDER BY strftime ('%Y', crime_date) ASC, COUNT(C.CrimeID) DESC;
</sql><sql name="9. Queries for Question 2">-- 9. Queries for Q2: Which areas (beats/disctricts) have the highest relative number of arrests (ratio of arrests to the total number of reported crimes? )


--------Number of crimes and arrest ratio by district
SELECT Neighbourhood.district,
count(Crime.CrimeID) AS Crimes_commited,
avg(arrest = 'true') AS arrests_ratio

FROM Crime 

LEFT JOIN Neighbourhood
ON Crime.beat=Neighbourhood.beat

GROUP By Neighbourhood.district
ORDER BY avg(CASE WHEN arrest = &quot;true&quot; then 1 else 0 end) DESC;

-----Beats - because beats are too small, we will show the 10 with the highest arrest ratio and 10 with the least ratio

---- 10 Beats with the highest arrest ratio

SELECT DISTINCT N.beat,
 count(C.CrimeID) as Crimes_commited,
avg(arrest = 'true') AS arrests_ratio
FROM Neighbourhood N 
JOIN Crime C
ON N.beat = C.beat
GROUP BY N.beat
ORDER BY arrests_ratio DESC
LIMIT 10;


------ 10 Beats with the lowest arrest ratio

SELECT DISTINCT N.beat,
 count(C.CrimeID)as Crimes_commited,
avg(arrest = 'true') AS arrests_ratio
FROM Neighbourhood N 
JOIN Crime C
ON N.beat = C.beat
GROUP BY N.beat
ORDER BY arrests_ratio ASC
LIMIT 10;
</sql><sql name="10. Queries for Question 3">-- 10. Queries for Q3. How does the number of crimes occurring change given time of the day (of the week?)? In which types of locations do they happen most often?


-----Crimes commited by the hour of the day
SELECT strftime('%H', crime_date) as hour, COUNT(CrimeID) as Crimes_commited FROM Crime
GROUP BY hour;

------Most common locationtype
SELECT locationdescription, COUNT(CrimeID) as Crimes_commited FROM Crime
GROUP BY locationdescription
ORDER BY COUNT(CrimeID) DESC;

------Most common locationtype + hours - for informative purposes
SELECT locationdescription, COUNT(CrimeID) as Crimes_commited, strftime('%H', crime_date) as hour FROM Crime
GROUP BY locationdescription, strftime('%H', crime_date)
ORDER BY COUNT(CrimeID) DESC;

------- Locationdescription of crimes occuring in given hours 
SELECT*FROM Location_view;

</sql><current_tab id="9"/></tab_sql></sqlb_project>
